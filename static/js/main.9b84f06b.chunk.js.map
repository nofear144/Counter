{"version":3,"sources":["Universal.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Universal","props","className","disabled","data","maxValue","error","minValue","onClick","callback","setdata","title","App","useState","setData","startValue","setStartValue","setMaxValue","setError","useEffect","localStorage","getItem","startValueFromStorage","JSON","parse","maxValueFromStorage","type","value","onChange","e","currentTarget","setItem","stringify","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qUAcaA,G,uBAAU,SAACC,GAGpB,OACI,4BAAQC,UAAW,eACXC,SAAUF,EAAMG,OAAOH,EAAMI,UAAaJ,EAAMK,QAASL,EAAMM,UAAY,GAAG,GAAKN,EAAMI,WAAWJ,EAAMM,SAC1GC,QALY,WAAKP,EAAMQ,WAAWR,EAAMS,SAAWT,EAAMS,QAAST,EAAMM,UAAU,KAKnDN,EAAMU,SCoGtCC,MA/Gf,WAEI,MAAsBC,mBAAS,GAA/B,mBAAKT,EAAL,KAAWU,EAAX,KAEA,EAAkCD,mBAAS,GAA3C,mBAAKE,EAAL,KAAiBC,EAAjB,KAEA,EAA8BH,mBAAS,GAAvC,mBAAKR,EAAL,KAAeY,EAAf,KAEA,EAAwBJ,oBAAS,GAAjC,mBAAKP,EAAL,KAAYY,EAAZ,KA+CA,OA5CAC,qBAAU,WACN,IAAIJ,EAAaK,aAAaC,QAAQ,eACtC,GAAIN,EAAY,CACZ,IAAIO,EAAwBC,KAAKC,MAAMT,GACvCC,EAAcM,MAEnB,IACHH,qBAAU,WACN,IAAId,EAAWe,aAAaC,QAAQ,aAEpC,GAAIhB,EAAU,CACV,IAAIoB,EAAsBF,KAAKC,MAAMnB,GACrCY,EAAYQ,MAEjB,IA+BC,yBAAKvB,UAAW,QACZ,yBAAKA,UAAW,OACZ,yBAAKA,UAAW,iBACZ,0BAAMA,UAAW,UAAjB,cACA,2BACIA,UAAWa,IAAeV,GAAYA,EAAW,GAAKA,EAAWU,EAAa,aAAe,cAC7FW,KAAK,SACLC,MAAOtB,EACPuB,SA5BpB,SAAwBC,GACpB,IAAIF,GAASE,EAAEC,cAAcH,MACST,EAArCS,GAASZ,GAAcY,GAAS,GACjCV,EAAYU,MA4BA,0BAAMzB,UAAW,UAAjB,gBACA,2BACIA,UAAWa,IAAeV,GAAYU,EAAa,GAAKV,EAAWU,EAAa,aAAe,cAC/FW,KAAK,SACLC,MAAOZ,EACPa,SA9BpB,SAA0BC,GACtB,IAAIF,GAASE,EAAEC,cAAcH,MACMT,IAAlCS,EAAQtB,GAAYsB,GAAS,IAC9BX,EAAcW,OA8BN,yBAAKzB,UAAW,aACZ,kBAAC,EAAD,CACIO,SA5BpB,WACIW,aAAaW,QAAQ,YAAaR,KAAKS,UAAU3B,IACjDe,aAAaW,QAAQ,cAAeR,KAAKS,UAAUjB,KA2BnCX,KAAMA,EACNO,MAAO,MACPJ,SAAUQ,EACVL,QAASI,EACTR,MAAOA,MAInB,yBAAKJ,UAAU,OACX,yBAAKA,UAAWE,IAASC,EAAW,YAAc,UAC7CU,EAAaV,GAAYU,IAAeV,GAAYU,EAAa,GAAKV,EAAW,GAAKA,EAAWU,EAC9F,+CAA4BX,GAGpC,yBAAKF,UAAW,gBACZ,kBAAC,EAAD,CACIO,SAAU,WA9D1BK,EAAQV,EAAO,IA+DCA,KAAMA,EACNO,MAAO,MACPN,SAAUA,IAEd,kBAAC,EAAD,CACII,SAAU,WAxE1BK,EAAQC,IAyEQX,KAAMA,EACNO,MAAO,MACPJ,SAAUQ,QCpGdkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.9b84f06b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./buttons.css\"\r\n\r\nexport type UniversalType={\r\n    callback:()=>void\r\n    data:number\r\n    title:string\r\n    setdata?:(number:number)=>void\r\n    error?:boolean\r\n    minValue?:number\r\n    maxValue?:number\r\n\r\n}\r\n\r\nexport const Universal=(props:UniversalType)=>{\r\n    const UniversalCallback=()=>{props.callback();props.setdata && props.setdata((props.minValue||0))}\r\n\r\n    return(\r\n        <button className={\"buttonsStyle\"}\r\n                disabled={props.data===props.maxValue  || props.error|| (props.minValue || 0)<0 || props.maxValue===props.minValue}\r\n                onClick= {UniversalCallback} >{props.title}</button>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport \"./buttons.css\"\r\nimport \"./input.css\"\r\nimport \"./tablo.css\"\r\n\r\nimport {Universal} from \"./Universal\";\r\n\r\n\r\nfunction App() {\r\n\r\n    let [data, setData] = useState(0)\r\n\r\n    let [startValue, setStartValue] = useState(0)\r\n\r\n    let [maxValue, setMaxValue] = useState(0)\r\n\r\n    let [error, setError] = useState(true)\r\n\r\n\r\n    useEffect(() => {\r\n        let startValue = localStorage.getItem('start value')\r\n        if (startValue) {\r\n            let startValueFromStorage = JSON.parse(startValue)\r\n            setStartValue(startValueFromStorage)\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        let maxValue = localStorage.getItem('max value')\r\n\r\n        if (maxValue) {\r\n            let maxValueFromStorage = JSON.parse(maxValue)\r\n            setMaxValue(maxValueFromStorage)\r\n        }\r\n    }, [])\r\n\r\n    function reset() {\r\n        setData(startValue)\r\n    }\r\n\r\n    function Inc() {\r\n        setData(data + 1)\r\n    }\r\n\r\n\r\n    function ChangeMaxValue(e: ChangeEvent<HTMLInputElement>) {\r\n        let value = +e.currentTarget.value;\r\n        (value <= startValue && value <= 0) ? setError(true) : setError(false)\r\n        setMaxValue(value)\r\n    }\r\n\r\n    function ChangeStartValue(e: ChangeEvent<HTMLInputElement>) {\r\n        let value = +e.currentTarget.value;\r\n        (value < maxValue && value >= 0) ? setError(false) : setError(true)\r\n        setStartValue(value)\r\n\r\n    }\r\n\r\n    function setLocalStorage() {\r\n        localStorage.setItem(\"max value\", JSON.stringify(maxValue))\r\n        localStorage.setItem(\"start value\", JSON.stringify(startValue))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"wrap\"}>\r\n            <div className={\"App\"}>\r\n                <div className={\"storageScreen\"}>\r\n                    <span className={\"maxMin\"}>max value:</span>\r\n                    <input\r\n                        className={startValue === maxValue || maxValue < 0 || maxValue < startValue ? \"InputError\" : \"inputMaxMin\"}\r\n                        type=\"number\"\r\n                        value={maxValue}\r\n                        onChange={ChangeMaxValue}\r\n                    />\r\n\r\n                    <span className={\"maxMin\"}>start value:</span>\r\n                    <input\r\n                        className={startValue === maxValue || startValue < 0 || maxValue < startValue ? \"InputError\" : \"inputMaxMin\"}\r\n                        type=\"number\"\r\n                        value={startValue}\r\n                        onChange={ChangeStartValue}\r\n                    />\r\n                </div>\r\n                <div className={\"SetStyles\"}>\r\n                    <Universal\r\n                        callback={setLocalStorage}\r\n                        data={data}\r\n                        title={\"set\"}\r\n                        minValue={startValue}\r\n                        setdata={setData}\r\n                        error={error}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"App\">\r\n                <div className={data === maxValue ? \"redNumber\" : \"number\"}>\r\n                    {startValue > maxValue || startValue === maxValue || startValue < 0 || maxValue < 0 || maxValue < startValue ?\r\n                        <div>Incorrect Data</div> : data}\r\n                </div>\r\n\r\n                <div className={\"IncResStyles\"}>\r\n                    <Universal\r\n                        callback={() => Inc()}\r\n                        data={data}\r\n                        title={\"Inc\"}\r\n                        maxValue={maxValue}\r\n                    />\r\n                    <Universal\r\n                        callback={() => reset()}\r\n                        data={data}\r\n                        title={\"Res\"}\r\n                        minValue={startValue}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}