{"version":3,"sources":["Universal.tsx","store/counter-reducer.ts","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["Universal","props","className","disabled","data","maxValue","error","minValue","onClick","callback","setdata","title","initialState","value","startValue","SetStartValueAC","type","SetMaxValueAC","ResetValueAC","StatusErrorAC","status","GetValueTC","dispatch","localStorage","getItem","startValueFromStorage","JSON","parse","maxValueFromStorage","App","useEffect","useSelector","state","useDispatch","onChange","e","maxvalue","currentTarget","minvalue","setItem","stringify","SetMinValueTC","SetMAxValueTC","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cb1b88c6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./buttons.css\"\r\n\r\nexport type UniversalType = {\r\n    callback: () => void\r\n    data: number\r\n    title: string\r\n    setdata?: (number: number) => void\r\n    error?: boolean\r\n    minValue?: number\r\n    maxValue?: number\r\n\r\n}\r\n\r\nexport const Universal = (props: UniversalType) => {\r\n    const UniversalCallback = () => {\r\n        props.callback();\r\n        props.setdata && props.setdata((props.minValue || 0))\r\n    }\r\n\r\n    return (\r\n        <button className={\"buttonsStyle\"}\r\n                disabled={props.data === props.maxValue\r\n                || props.error\r\n                || (props.minValue || 0) < 0\r\n                || props.maxValue === props.minValue\r\n                || (props.maxValue || 0) < 0\r\n\r\n\r\n                }\r\n                onClick={UniversalCallback}>{props.title}</button>\r\n    )\r\n}","import {Dispatch} from \"redux\";\r\n\r\nlet initialState = {\r\n    value: 0,\r\n    startValue: 0,\r\n    maxValue: 0,\r\n    error: true,\r\n\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const CounterReducer = (data:InitialStateType = initialState, action: containerAcTypes):InitialStateType => {\r\n    /* debugger*/\r\n    switch (action.type) {\r\n        case \"RESET_VALUE\":\r\n            return {...data, value: action.value}\r\n        case \"INCREASE_VALUE\":\r\n            return {...data, value: data.value + 1}\r\n        case \"SET_START_VALUE\":\r\n            return {...data, startValue: action.value}\r\n        case \"SET_MAX_VALUE\":\r\n            return {...data, maxValue: action.value}\r\n        case \"STATUS_ERROR\":\r\n            return {...data, error: action.status}\r\n\r\n\r\n        default :\r\n            return data\r\n    }\r\n\r\n}\r\n\r\ntype IncreaseValueACType = {\r\n    type: \"INCREASE_VALUE\"\r\n}\r\ntype GetStartValueACType = ReturnType<typeof SetStartValueAC>\r\ntype GetMaxValueACType = ReturnType<typeof SetMaxValueAC>\r\ntype StatusErrorACType = ReturnType<typeof StatusErrorAC>\r\ntype ResetValueACType = ReturnType<typeof ResetValueAC>\r\n\r\n\r\nexport type containerAcTypes =\r\n    IncreaseValueACType\r\n    | GetStartValueACType\r\n    | GetMaxValueACType\r\n    | StatusErrorACType\r\n    | ResetValueACType;\r\n\r\n\r\nexport let IncValueAc = () => {\r\n    return {\r\n        type: \"INCREASE_VALUE\",\r\n    }\r\n}\r\nexport const SetStartValueAC = (value: number) => {\r\n    return {\r\n        type: \"SET_START_VALUE\",\r\n        value,\r\n    } as const\r\n}\r\nexport const SetMaxValueAC = (value: number) => {\r\n    return {\r\n        type: \"SET_MAX_VALUE\",\r\n        value,\r\n    } as const\r\n}\r\nexport const ResetValueAC = (value: number) => {\r\n    return {\r\n        type: \"RESET_VALUE\",\r\n        value,\r\n    } as const\r\n}\r\nexport const StatusErrorAC = (status: boolean) => {\r\n    return {\r\n        type: \"STATUS_ERROR\",\r\n        status\r\n\r\n    } as const\r\n}\r\n\r\n\r\n//THUNK\r\nexport const SetMinValueTC = (startValue: number) => (dispatch: Dispatch) => {\r\n    localStorage.setItem(\"start value\", JSON.stringify(startValue))\r\n    dispatch(SetStartValueAC(startValue))\r\n\r\n\r\n}\r\nexport const SetMAxValueTC = (maxValue: number) => (dispatch: Dispatch) => {\r\n    localStorage.setItem(\"max value\", JSON.stringify(maxValue))\r\n    dispatch(SetMaxValueAC(maxValue))\r\n\r\n}\r\n\r\nexport const GetValueTC = () => (dispatch: Dispatch) => {\r\n    let startValue = localStorage.getItem('start value')\r\n    if (startValue) {\r\n        let startValueFromStorage = JSON.parse(startValue)\r\n        dispatch(SetStartValueAC(startValueFromStorage))\r\n\r\n    }\r\n\r\n    let maxValue = localStorage.getItem('max value')\r\n    if (maxValue) {\r\n        let maxValueFromStorage = JSON.parse(maxValue)\r\n        dispatch(SetMaxValueAC(maxValueFromStorage))\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect} from 'react';\r\nimport './App.css';\r\nimport \"./buttons.css\"\r\nimport \"./input.css\"\r\nimport \"./tablo.css\"\r\n\r\nimport {Universal} from \"./Universal\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {rootReducerType} from \"./store/store\";\r\nimport {\r\n    SetStartValueAC, GetValueTC,\r\n    IncValueAc, SetMAxValueTC,\r\n    SetMinValueTC,\r\n    StatusErrorAC, SetMaxValueAC, ResetValueAC\r\n} from \"./store/counter-reducer\";\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(GetValueTC())\r\n    }, [])\r\n\r\n    let data = useSelector<rootReducerType, number>(state => state.data.value)\r\n    let startValue = useSelector<rootReducerType, number>(state => state.data.startValue)\r\n    let maxValue = useSelector<rootReducerType, number>(state => state.data.maxValue)\r\n    let error = useSelector<rootReducerType, boolean>(state => state.data.error)\r\n    let dispatch = useDispatch()\r\n\r\n\r\n    function reset() {\r\n        dispatch(GetValueTC())\r\n        dispatch(ResetValueAC(startValue))\r\n    }\r\n\r\n    function Inc() {\r\n        dispatch(IncValueAc())\r\n    }\r\n\r\n\r\n    function ChangeMaxValue(e: ChangeEvent<HTMLInputElement>) {\r\n        let maxvalue = +e.currentTarget.value;\r\n        (maxvalue <= startValue && maxvalue <= 0 && maxvalue === startValue) ? dispatch(StatusErrorAC(true)) : dispatch(StatusErrorAC(false))\r\n        dispatch(SetMaxValueAC(maxvalue))\r\n    }\r\n\r\n    function ChangeStartValue(e: ChangeEvent<HTMLInputElement>) {\r\n        let minvalue = +e.currentTarget.value;\r\n        (minvalue < maxValue && minvalue >= 0 && minvalue !== maxValue) ? dispatch(StatusErrorAC(false)) : dispatch(StatusErrorAC(true))\r\n        dispatch(SetStartValueAC(minvalue))\r\n\r\n    }\r\n\r\n    function setLocalStorage() {\r\n        dispatch(SetMinValueTC(startValue))\r\n        dispatch(SetMAxValueTC(maxValue))\r\n        dispatch(ResetValueAC(startValue))\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={\"wrap\"}>\r\n            <div className={\"App\"}>\r\n                <div className={\"storageScreen\"}>\r\n                    <span className={\"maxMin\"}>max value:</span>\r\n                    <input\r\n                        className={startValue === maxValue || maxValue < 0 || maxValue < startValue ? \"InputError\" : \"inputMaxMin\"}\r\n                        type=\"number\"\r\n                        value={maxValue}\r\n                        onChange={ChangeMaxValue}\r\n                    />\r\n\r\n                    <span className={\"maxMin\"}>start value:</span>\r\n                    <input\r\n                        className={startValue === maxValue || startValue < 0 || maxValue < startValue ? \"InputError\" : \"inputMaxMin\"}\r\n                        type=\"number\"\r\n                        value={startValue}\r\n                        onChange={ChangeStartValue}\r\n                    />\r\n                </div>\r\n                <div className={\"SetStyles\"}>\r\n                    <Universal\r\n                        callback={setLocalStorage}\r\n                        data={data}\r\n                        title={\"set\"}\r\n                        minValue={startValue}\r\n                        error={error}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"App\">\r\n                <div className={data === maxValue || data > maxValue ? \"redNumber\" : \"number\"}>\r\n                    {startValue > maxValue || startValue === maxValue || startValue < 0 || maxValue < 0 || maxValue < startValue ?\r\n                        <div className={\"errorStl\"}>Incorrect Data</div> : data}\r\n                </div>\r\n\r\n                <div className={\"IncResStyles\"}>\r\n                    <Universal\r\n                        callback={() => Inc()}\r\n                        data={data}\r\n                        title={\"Inc\"}\r\n                        maxValue={maxValue}\r\n                    />\r\n                    <Universal\r\n                        callback={() => reset()}\r\n                        data={data}\r\n                        title={\"Res\"}\r\n                        minValue={startValue}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\n\r\nimport {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {CounterReducer} from \"./counter-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\n\r\n\r\nlet rootReducer=combineReducers({\r\n    data:CounterReducer,\r\n\r\n})\r\nexport type rootReducerType=ReturnType<typeof rootReducer>\r\nexport let store=createStore(rootReducer,applyMiddleware(thunk))\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(<Provider store={store}><App /></Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}